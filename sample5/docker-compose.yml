version: "3.7"
#FRONTEND

services:
  react-app1:
    container_name: react-app1
    restart: unless-stopped
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "6001:6000"
    volumes:
      - ../client:/app
      - ../client/src:/app/src 
      - ../client/default.conf:/etc/nginx/conf.d/default.conf
    stdin_open: true
    tty: true
    networks:
      - web-network

  react-app2:
    container_name: react-app2
    restart: unless-stopped
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "6002:6000"
    volumes:
      - ../client:/app
      - ../client/src:/app/src 
      - ../client/default.conf:/etc/nginx/conf.d/default.conf
    stdin_open: true
    tty: true
    networks:
      - web-network
  
  react-app3:
    container_name: react-app3
    restart: unless-stopped
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "6003:6000"
    volumes:
      - ../client:/app
      - ../client/src:/app/src 
      - ../client/default.conf:/etc/nginx/conf.d/default.conf
    stdin_open: true
    tty: true
    networks:
      - web-network

  react-nginx:
    image: nginx:alpine  # Use the official NGINX image
    build:
      context: ../client
      dockerfile: Dockerfile
    volumes:
      - ../client:/app
      - ../client/src:/app/src
      - ../client/nginx.conf:/etc/nginx/nginx.conf  # Mount the custom NGINX config
    ports:
      - "6000:6000"  
    networks:
      - web-network

#BACKEND

  app:
    build:
      context: ../server
      dockerfile: Dockerfile
    image: request-form
    container_name: sample4
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ../server/storage:/var/www/storage
      - ../server/bootstrap/cache:/var/www/bootstrap/cache
      - ../server/:/var/www
    networks:
      - laravel-app
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db  # Ensure Laravel connects to the db container
      DB_PORT: 3306
      DB_DATABASE: backend
      DB_USERNAME: root
      DB_PASSWORD: ${DB_PASSWORD}  # Ensure this matches your DB password
  
  db:
    image: mysql:8.0
    container_name: mysql-server2
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: backend2
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "3306:3306" 
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - laravel-app
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db  # Name of the MySQL container
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}  # Use the same password as in the db container
    ports:
      - "8080:80"  # Expose phpMyAdmin on port 8080
    networks:
      - laravel-app
      
  laravel-nginx:
    image: nginx:alpine
    container_name: nginx-server
    restart: unless-stopped
    ports:
      - 6002:6002
    volumes:
      - ../:/var/www
      - ../server/docker-compose/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - laravel-app

networks:
  laravel-app:
    driver: bridge
  web-network:
    driver: bridge

volumes:
  mysql_data:  # Named volume for MySQL data
